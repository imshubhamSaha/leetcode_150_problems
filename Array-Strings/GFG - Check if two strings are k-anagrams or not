class Solution{
    areKAnagrams(str1, str2, k){
        const n = str1.length;
        const m = str2.length;
        if (n !== m) return false;
        
        const char_map = new Map();
       
        for(const ch of str1) 
            char_map.set(ch, (char_map.get(ch) || 0) + 1);
        
        for (const ch of str2)
            char_map.has(ch) && (char_map.get(ch) > 0) && char_map.set(ch, char_map.get(ch) -1);
            
        let cnt = 0;    
        for (const val of char_map.values()) 
            cnt += val;
            
        return k >= cnt;;
    }
}

TIME COMPLEXITY -->> O(N) + O(N) + O(N) ~ O(N);
SPACE COMPLEXITY -->> O(26) ~ O(1)
__________________________________________________________________________________________________________________________________________


class Solution{
    areKAnagrams(str1, str2, k){
        const n = str1.length;
        const m = str2.length;
        if (n !== m) return false;
        
        const char_arr1 = new Array(26).fill(0);
        const char_arr2 = new Array(26).fill(0);
        
        for(let i = 0; i < n; i++) {
            char_arr1[str1[i].charCodeAt(0) - 97]++;
            char_arr2[str2[i].charCodeAt(0) - 97]++;
        }
        
        let cnt = 0;
        for (let  i = 0; i < 26; i++) 
            if (char_arr1[i] > char_arr2[i]) cnt += char_arr1[i] - char_arr2[i];
            
        return k >= cnt;
    }
}

TIME COMPLEXITY -->> O(N) + O(N) ~ O(N);
SPACE COMPLEXITY -->> O(26) + O(26) ~ O(1)
__________________________________________________________________________________________________________________________________________


class Solution{
    areKAnagrams(str1, str2, k){
        const n = str1.length;
        const m = str2.length;
        if (n !== m) return false;
        
        const char_arr = new Array(26).fill(0);
        
        
        for(let i = 0; i < n; i++) 
            char_arr[str1[i].charCodeAt(0) - 97]++;
        
        
        let dist_char = 0;
        for (let  i = 0; i < n; i++) {
            if (char_arr[str2[i].charCodeAt(0) - 97] > 0) 
                char_arr[str2[i].charCodeAt(0) - 97]--;
            else dist_char++;
            
            if (dist_char > k) return false;
        }
            
        return true;
    }
}
TIME COMPLEXITY -->> O(N) + O(N) ~ O(N);
SPACE COMPLEXITY -->> O(26) ~ O(1)
__________________________________________________________________________________________________________________________________________
