class Solution {
    //Function to find the maximum number of instances of a substring.
    maxInstance(s)
    {
        const n = s.length;
        
        const balloon_char = [{char:"b", repeat:1},{char:"a", repeat:1},
        {char:"l", repeat:2},{char:"o", repeat:2},{char:"n", repeat:1}];
        
        const char = new Array(26).fill(0);
        
        for (const ch of s) 
            char[ch.charCodeAt(0) - 97]++;
        
        let possible_balloon = Number.MAX_SAFE_INTEGER;
        
        for (let i = 0; i < balloon_char.length; i++) {
            const {char:ch, repeat:times} = balloon_char[i];
            
            if (char[ch.charCodeAt(0) - 97] === 0) 
                return 0;
            
            let num = char[ch.charCodeAt(0) - 97];
            possible_balloon = Math.min(possible_balloon, Math.floor(num/times));
        }
        
        return possible_balloon;
    }
}

TIME COMPLEXITY -->> O(N) + O(5) ~ O(N)
SPACE COMPLEXITY -->> O(5) + O(26) ~ O(1)

________________________________________________________________________________________________________________________________________
